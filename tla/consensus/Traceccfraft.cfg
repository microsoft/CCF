\* A trace specification defines a set of one or more traces, wherein the value of some
\* variables in each state aligns with the values specified on the corresponding line
\* of the log or trace file. Commonly, the log file might be incomplete, failing to
\* provide the value of all variables. In such instances, the omitted values are
\* determined non-deterministically, adhering to the high-level specification's parameters.
\* Furthermore, a trace may not be complete such that it only matches a prefix of the log.
SPECIFICATION
    TraceSpec

VIEW
    TraceView

POSTCONDITION
    TraceMatchedNonTrivially

\* Some of the traces in TraceSpec may not refine the high-level specification ccfraft.
\* Those traces will cause the trace validator to report a counterexample even if 
\* TraceSpec contains a trace that refines ccfraft and fully matches the log file.
\* The real property to check is that TraceSpec contains a trace that refines ccfraft and
\* matches the full log.  However, TLA cannot check this property directly because it
\* is a hyperproperty.
PROPERTIES
    CCFSpec

\* TLA has only limited support for hyperproperties.  The following property is a poorman's
\* hyperproperty that asserts that TLC generated *at least one* trace that fully matches the
\* log file. 
PROPERTIES
    TraceMatched

INVARIANT 
    TraceDifferentialInv

CONSTRAINT
    TraceMatchesConstraints

\* Checking for deadlocks during trace validation is disabled, as it may lead to false
\* counterexamples. A trace specification defines a set of traces, where at least one
\* trace is expected to match the log file in terms of variable values and length.
\* However, partial matches may occur where the trace cannot be extended to fully
\* correspond with the log file. In such cases, deadlock checking would report the first
\* of these traces.
CHECK_DEADLOCK
    FALSE

ACTION_CONSTRAINT 
    Termination

CONSTANTS
    Servers <- TraceServers

    \* Redefine the AppendEntries batch size to model empty and batches with arbitrary size.
    AppendEntriesBatchsize <- TraceAppendEntriesBatchsize
    
    InitReconfigurationVars <- TraceInitReconfigurationVars

    Nil = Nil

    Follower = L_Follower
    Candidate = L_Candidate
    Leader = L_Leader
    None = L_None

    Active = R_Active
    RetirementOrdered = R_RetirementOrdered
    RetirementSigned = R_RetirementSigned
    RetirementCompleted = R_RetirementCompleted
    RetiredCommitted = R_RetiredCommitted

    RequestVoteRequest = M_RequestVoteRequest
    RequestVoteResponse = M_RequestVoteResponse
    AppendEntriesRequest = M_AppendEntriesRequest
    AppendEntriesResponse = M_AppendEntriesResponse
    ProposeVoteRequest = M_ProposeVoteRequest

    OrderedNoDup = N_OrderedNoDup
    Ordered = N_Ordered
    ReorderedNoDup = N_ReorderedNoDup
    Reordered = N_Reordered
    \* Ordered instead of OrderedNoDup compared to ordinary model checking.
    Guarantee = N_Ordered

    TypeEntry = T_Entry
    TypeSignature = T_Signature
    TypeReconfiguration = T_Reconfiguration
    TypeRetired = T_Retired

    \* state.h my_node_id is a string.
    NodeOne = "0"
    NodeTwo = "1"
    NodeThree = "2"
    NodeFour = "3"
    NodeFive = "4"

ALIAS 
    TraceAlias