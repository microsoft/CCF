name: "TLA+ Spec Verification"

on:
  push:
    paths:
      - "tla/**"
  pull_request:
    paths:
      - "tla/**"
  workflow_dispatch:

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  model-checking-consistency:
    name: Model Checking - Consistency
    runs-on: [self-hosted, 1ES.Pool=gha-virtual-ccf-sub]
    container:
      image: ccfmsrc.azurecr.io/ccf/ci:2024-04-03-virtual-clang15

    steps:
      - uses: actions/checkout@v4
      - run: |
          sudo apt update
          sudo apt install -y default-jre
          python3 ./tla/install_deps.py

      - name: consistency/MCSingleNode.cfg
        run: |
          cd tla/
          ./tlc.sh -workers auto consistency/MCSingleNode.tla -dumpTrace json MCSingleNode.json

      - name: consistency/MCSingleNodeReads.cfg
        run: |
          cd tla/
          ./tlc.sh -workers auto consistency/MCSingleNodeReads.tla -dumpTrace json MCSingleNodeReads.json

      - name: consistency/MCMultiNode.cfg
        run: |
          cd tla/
          ./tlc.sh -workers auto consistency/MCMultiNode.tla -dumpTrace json MCMultiNode.json

      - name: consistency/MCMultiNodeReads.cfg
        run: |
          cd tla/
          ./tlc.sh -workers auto consistency/MCMultiNodeReads.tla -dumpTrace json MCMultiNodeReads.json

      - name: consistency/MCMultiNodeReadsAlt.cfg
        run: |
          cd tla/
          ./tlc.sh -workers auto consistency/MCMultiNodeReadsAlt.tla -dumpTrace json MCMultiNodeReadsAlt.json

      - name: Upload TLC's out file as an artifact. Can be imported into the TLA+ Toolbox.
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: tlc
          path: |
            tla/consistency/*_TTrace_*.tla
            tla/*.json

  counterexamples-consistency:
    name: Counterexamples - Consistency
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - run: python3 ./tla/install_deps.py

      - name: consistency/MCSingleNodeCommitReachability.cfg
        run: |
          cd tla/
          ./tlc_debug.sh -workers auto -config consistency/MCSingleNodeCommitReachability.cfg consistency/MCSingleNodeReads.tla

      - name: consistency/MCMultiNodeCommitReachability.cfg
        run: |
          cd tla/
          ./tlc_debug.sh -workers auto -config consistency/MCMultiNodeCommitReachability.cfg consistency/MCMultiNodeReads.tla

      - name: consistency/MCMultiNodeInvalidReachability.cfg
        run: |
          cd tla/
          ./tlc_debug.sh -workers auto -config consistency/MCMultiNodeInvalidReachability.cfg consistency/MCMultiNodeReads.tla

      - name: consistency/MCMultiNodeReadsNotLinearizable.cfg
        run: |
          cd tla/
          ./tlc_debug.sh -workers auto -config consistency/MCMultiNodeReadsNotLinearizable.cfg consistency/MCMultiNodeReads.tla

  simulation-consistency:
    name: Simulation - Consistency
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - run: python3 ./tla/install_deps.py

      - name: consistency/MultiNodeReads.cfg
        run: |
          cd tla/
          ./tlc.sh -workers auto -simulate num=5 -depth 50 consistency/MultiNodeReads.tla -dumpTrace json MultiNodeReads.json

      - name: Upload traces in TLA and JSON format
        uses: actions/upload-artifact@v3
        if: ${{ failure() }}
        with:
          name: tlc
          path: |
            tla/consistency/*_TTrace_*.tla
            tla/*.json

  tlai-linter:
    runs-on: ubuntu-latest
    if: github.repository == 'microsoft/CCF'

    env:
      ## https://microsoft.github.io/genaiscript/reference/token/
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_API_BASE: ${{ secrets.OPENAI_API_BASE }}
      OPENAI_API_TYPE: ${{ secrets.OPENAI_API_TYPE }}

    steps:
      - name: Clone repo
        uses: actions/checkout@v4
        with:
          ## All history for git diff below to succeed.
          fetch-depth: 0

      - name: Check if HEAD commit contains TLA changes.
        id: git_commit
        run: echo "::set-output name=contains_tla::$(git diff --name-only HEAD^ | grep -q '\.tla' && echo 'true' || echo 'false')"

      - name: Setup NodeJS
        if: steps.git_commit.outputs.contains_tla == 'true'
        ## https://github.com/actions/setup-node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Run GenAIscript on the TLA+ specs that are added in this pull request.
        if: steps.git_commit.outputs.contains_tla == 'true'
        ## Identify git diff: $(git diff --name-only HEAD^ | grep '.tla')
        ## Install genaiscript runtime: https://microsoft.github.io/genaiscript/reference/cli/
        ## Output LLM response in SARIF format: https://microsoft.github.io/genaiscript/reference/scripts/annotations/ (redirect other output to /dev/null for GH not to also show the annotations)
        run: npx --yes genaiscript run scripts/TLAi-linter.genai.js $(git diff --name-only HEAD^ | grep '\.tla') --max-tokens 2000 --out-annotations results.sarif > /dev/null && jq '.runs |= map(.results |= map(select(.level != "note")))' results.sarif > filtered.sarif

      - name: Upload SARIF file
        if: (success() || failure()) && steps.git_commit.outputs.contains_tla == 'true'
        ## https://sarifweb.azurewebsites.net
        ## https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: filtered.sarif
