# Start a 5-node network
start_node,0
assert_detail,0,leadership_state,Leader
emit_signature,2

assert_detail,0,leadership_state,Leader
assert_commit_idx,0,2

trust_nodes,2,1,2,3,4
emit_signature,2

dispatch_all
periodic_all,10
dispatch_all
assert_commit_idx,0,4
periodic_all,10
dispatch_all

assert_state_sync

state_all

# Node 0 produces an unshared suffix
emit_signature,2
emit_signature,2
emit_signature,2

# Node 1 calls and wins an election
periodic_one,1,100
assert_detail,1,leadership_state,Candidate
dispatch_single,1,2
dispatch_single,2,1
dispatch_single,1,3
dispatch_single,3,1
assert_detail,1,leadership_state,Leader

# Node 1 produces a conflicting suffix
emit_signature,3
emit_signature,3
emit_signature,3

# Node 1 tries to share this
periodic_one,1,10
drop_pending,1 # First forget prior messages
periodic_one,1,10 # This is an empty heartbeat
dispatch_single,1,0

# The 0->1 channel now contains a NACK, which we take great care to retain for a while!
summarise_messages,0,1

# Node 1 shares their suffix successfully with node 2
dispatch_single,1,2
dispatch_single,2,1
periodic_one,1,10
dispatch_single,1,2

# Node 2 calls and wins an election
periodic_one,2,100
assert_detail,2,leadership_state,Candidate
dispatch_single,2,3
dispatch_single,3,2
dispatch_single,2,4
dispatch_single,4,2
assert_detail,1,leadership_state,Leader

# Node 2 updates node 0 with the suffix produced by node 1
drop_pending,2
periodic_one,2,10
dispatch_one,2
dispatch_single,0,2
periodic_one,2,10
dispatch_one,2
dispatch_single,0,2
periodic_one,2,10
dispatch_one,2
dispatch_single,0,2

# Node 2 extends this suffix, shares it with node 0
emit_signature,4
emit_signature,4
periodic_one,2,10
dispatch_single,2,0

# Node 1 calls and wins an election
drop_pending,1
periodic_one,1,100
assert_detail,1,leadership_state,Candidate
dispatch_single,1,3
dispatch_single,3,1
dispatch_single,1,4
dispatch_single,4,1
assert_detail,1,leadership_state,Leader
drop_pending,1

# Node 1 creates an alternative branch from 2's recent suffix
emit_signature,5
emit_signature,5

# Node 1 shares this with 3, so that it is only needs 1 more ACK to advance commit
periodic_one,1,10
dispatch_single,1,3
dispatch_single,3,1
periodic_one,1,10
dispatch_single,1,3
dispatch_single,1,3
dispatch_single,3,1
dispatch_single,3,1

# Node 1 finally receives that stale NACK from 0
drop_pending,1
state_all
summarise_messages,0,1
dispatch_single,0,1
summarise_messages,0,1

# Node 1 now has an underestimate of its match with 0, so will produce some redundant (matching) AEs
periodic_one,1,10

# The lead AE in the 1->0 should now be a NOP, containing entirely entries that 0 already has
dispatch_single,1,0

# What did 0 produce as the response, and how does node 1 handle that?
dispatch_single,0,1

summarise_logs_all
state_all

assert_commit_safety,1
