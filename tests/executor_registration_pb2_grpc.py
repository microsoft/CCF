# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import executor_registration_pb2 as executor__registration__pb2


class ExecutorRegistrationStub(object):
    """Service exposed by a CCF node for registering new executor instances.
    The set of measurements which the node will accept are dictated by
    governance of that CCF instance.
    This service accepts anonymous clients.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterExecutor = channel.unary_unary(
                '/ccf.ExecutorRegistration/RegisterExecutor',
                request_serializer=executor__registration__pb2.NewExecutor.SerializeToString,
                response_deserializer=executor__registration__pb2.RegistrationResult.FromString,
                )


class ExecutorRegistrationServicer(object):
    """Service exposed by a CCF node for registering new executor instances.
    The set of measurements which the node will accept are dictated by
    governance of that CCF instance.
    This service accepts anonymous clients.
    """

    def RegisterExecutor(self, request, context):
        """Register a new executor with this node. The receiving node will verify
        that the contained attestation is valid, then that it contains a trusted
        measurement, and if those succeed it will requests to the KV service from
        the given client cert.
        Returns indication of whether the registration succeeded, and error
        details where appropriate.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecutorRegistrationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterExecutor': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterExecutor,
                    request_deserializer=executor__registration__pb2.NewExecutor.FromString,
                    response_serializer=executor__registration__pb2.RegistrationResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ccf.ExecutorRegistration', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecutorRegistration(object):
    """Service exposed by a CCF node for registering new executor instances.
    The set of measurements which the node will accept are dictated by
    governance of that CCF instance.
    This service accepts anonymous clients.
    """

    @staticmethod
    def RegisterExecutor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ccf.ExecutorRegistration/RegisterExecutor',
            executor__registration__pb2.NewExecutor.SerializeToString,
            executor__registration__pb2.RegistrationResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
