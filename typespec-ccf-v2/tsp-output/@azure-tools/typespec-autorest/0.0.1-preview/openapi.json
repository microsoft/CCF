{
  "swagger": "2.0",
  "info": {
    "title": "Managed CCF Governance",
    "version": "0.0.1-preview",
    "x-typespec-generated": [
      {
        "emitter": "@azure-tools/typespec-autorest"
      }
    ]
  },
  "schemes": [
    "https"
  ],
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "tags": [],
  "paths": {
    "/gov/commit": {
      "get": {
        "operationId": "Gov_GetCommit",
        "description": "Get current committed sequence number. May be used to poll for a specific transaction to be committed, or to verify that all nodes are in-sync.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CommitInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/gov/proposals": {
      "get": {
        "operationId": "Gov_ListOpenProposals",
        "description": "Returns all current proposed changes to the service. Note that non-open proposals (ie - those which have already been accepted, rejected, withdrawn, etc) are not returned.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "type": "object",
              "properties": {
                "value": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Proposal"
                  },
                  "x-ms-identifiers": [],
                  "x-typespec-name": "Proposal[]",
                  "description": "The Proposal items on this page"
                },
                "nextLink": {
                  "type": "string",
                  "format": "uri",
                  "description": "The link to the next page of items",
                  "x-typespec-name": "TypeSpec.Rest.ResourceLocation"
                }
              },
              "description": "Paged collection of Proposal items",
              "required": [
                "value"
              ],
              "x-typespec-name": "Azure.Core.Foundations.CustomPage<Proposal, Azure.Core.(anonymous model)>"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/gov/proposals/{proposalId}": {
      "get": {
        "operationId": "Gov_GetProposal",
        "description": "Returns a summary of a single proposed change to the service.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "description": "Unique ID assigned to this proposal at its submission, by the service.",
            "format": "hex",
            "maxLength": 64,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Proposal"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/gov/proposals/{proposalId}/ballots/{memberId}:submit": {
      "post": {
        "operationId": "Gov_Submit",
        "description": "Submit an executable ballot for a specific proposal. This may be as simple as `return true` to vote in favour, or contain reads from the KV and conditions on the proposal contents.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "description": "Unique ID assigned to this proposal at its submission, by the service.",
            "format": "hex",
            "maxLength": 64,
            "type": "string"
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "ID of CCF member who signed and submitted this ballot.",
            "format": "hex",
            "maxLength": 64,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "A raw CoseSign1 signature. The required protected headers and content schema will vary by action.",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Proposal"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "consumes": [
          "application/cose"
        ]
      }
    },
    "/gov/proposals/{proposalId}/ballots/{memberId}": {
      "get": {
        "operationId": "Gov_GetBallot",
        "description": "Returns a member's submitted ballot.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "description": "Unique ID assigned to this proposal at its submission, by the service.",
            "format": "hex",
            "maxLength": 64,
            "type": "string"
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "ID of CCF member who signed and submitted this ballot.",
            "format": "hex",
            "maxLength": 64,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Ballot"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/gov/proposals/{proposalId}/details/actions": {
      "get": {
        "operationId": "Gov_GetActions",
        "description": "Returns actions contained in a proposal.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "proposalId",
            "in": "path",
            "required": true,
            "description": "Unique ID assigned to this proposal at its submission, by the service.",
            "format": "hex",
            "maxLength": 64,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/ProposalActions"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/gov/proposals/proposals:propose": {
      "post": {
        "operationId": "Gov_Propose",
        "description": "Submit a proposed change to the service. This will be assigned an ID by the service. Idempotence is based on the signed proposal body - submitting identical signed proposals multiple times will only create a single proposal on the server, unless sufficient time has passed (since the `created_at` signed COSE header), in which case the submission is stale and will return an error.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "A raw CoseSign1 signature. The required protected headers and content schema will vary by action.",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/Proposal"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "consumes": [
          "application/cose"
        ]
      }
    },
    "/gov/stateDigests/{memberId}:update": {
      "post": {
        "operationId": "Gov_Update",
        "description": "TODO",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "Identifier for member this stateDigest applies to.",
            "format": "hex",
            "maxLength": 64,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "A raw CoseSign1 signature. The required protected headers and content schema will vary by action.",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/StateDigest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "consumes": [
          "application/cose"
        ]
      }
    },
    "/gov/stateDigests/{memberId}:ack": {
      "post": {
        "operationId": "Gov_Ack",
        "description": "Submit a signed acknowledgement of a recent digest of the service status, to transition the member to Active.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "Identifier for member this stateDigest applies to.",
            "format": "hex",
            "maxLength": 64,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "A raw CoseSign1 signature. The required protected headers and content schema will vary by action.",
            "schema": {
              "type": "string",
              "format": "binary"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "There is no content to send for this request, but the headers may be useful. "
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        },
        "consumes": [
          "application/cose"
        ]
      }
    },
    "/gov/stateDigests/{memberId}": {
      "get": {
        "operationId": "Gov_GetStateDigest",
        "description": "TODO",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "memberId",
            "in": "path",
            "required": true,
            "description": "Identifier for member this stateDigest applies to.",
            "format": "hex",
            "maxLength": 64,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/StateDigest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    },
    "/gov/tx": {
      "get": {
        "operationId": "Gov_GetTransactionInfo",
        "description": "Fetch status of transaction by transaction ID, to determine whether it has committed.",
        "parameters": [
          {
            "$ref": "#/parameters/Azure.Core.Foundations.ApiVersionParameter"
          },
          {
            "name": "transactionId",
            "in": "query",
            "required": true,
            "description": "TODO",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/TxInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "headers": {
              "x-ms-error-code": {
                "description": "String error code indicating what went wrong.",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Azure.Core.Foundations.ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Action": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of action to perform. This should match an action defined in the service's constitution, so that it can be invoked by the `apply` function of the constitution if the proposal is accepted."
        },
        "args": {
          "type": "object",
          "properties": {},
          "description": "Arguments to modify the behaviour of this action. The schema is determined by the action implementation, and should be validated by a `validate` call in the constitution.",
          "x-typespec-name": "{}"
        }
      },
      "description": "A single step in a proposed change to the service.",
      "required": [
        "name",
        "args"
      ]
    },
    "Azure.Core.Foundations.Error": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "message": {
          "type": "string",
          "description": "A human-readable representation of the error."
        },
        "target": {
          "type": "string",
          "description": "The target of the error."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Azure.Core.Foundations.Error"
          },
          "x-ms-identifiers": [],
          "x-typespec-name": "Azure.Core.Foundations.Error[]",
          "description": "An array of details about specific errors that led to this reported error."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "An object containing more specific information than the current object about the error."
        }
      },
      "description": "The error object.",
      "required": [
        "code",
        "message",
        "details"
      ]
    },
    "Azure.Core.Foundations.ErrorResponse": {
      "type": "object",
      "properties": {
        "error": {
          "$ref": "#/definitions/Azure.Core.Foundations.Error",
          "description": "The error object."
        }
      },
      "description": "A response containing error details.",
      "required": [
        "error"
      ]
    },
    "Azure.Core.Foundations.InnerError": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string",
          "description": "One of a server-defined set of error codes."
        },
        "innererror": {
          "$ref": "#/definitions/Azure.Core.Foundations.InnerError",
          "description": "Inner error."
        }
      },
      "description": "An object containing more specific information about the error. As per Microsoft One API guidelines - https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.",
      "required": [
        "code"
      ]
    },
    "Ballot": {
      "type": "object",
      "properties": {
        "memberId": {
          "type": "string",
          "description": "ID of CCF member who signed and submitted this ballot.",
          "format": "hex",
          "maxLength": 64,
          "readOnly": true
        },
        "ballot": {
          "type": "string",
          "description": "TODO",
          "x-ms-mutability": [
            "create"
          ]
        }
      },
      "description": "The source script of an executable vote from a member, regarding a proposed change to the service.",
      "required": [
        "memberId",
        "ballot"
      ]
    },
    "CommitInfo": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string",
          "description": "Identifier of latest committed transaction.",
          "pattern": "^[0-9]+\\.[0-9]+$",
          "readOnly": true
        }
      },
      "description": "TODO",
      "required": [
        "transactionId"
      ]
    },
    "Proposal": {
      "type": "object",
      "properties": {
        "proposalId": {
          "type": "string",
          "description": "Unique ID assigned to this proposal at its submission, by the service.",
          "format": "hex",
          "maxLength": 64,
          "readOnly": true
        },
        "proposerId": {
          "type": "string",
          "description": "ID of CCF member who signed and created this proposal.",
          "format": "hex",
          "maxLength": 64,
          "readOnly": true
        },
        "proposalState": {
          "$ref": "#/definitions/ProposalState",
          "description": "Current state of this proposal."
        },
        "ballotCount": {
          "type": "integer",
          "format": "uint64",
          "description": "Count of how many ballots have been submitted for this proposal."
        }
      },
      "description": "Description of a proposed change to the service.",
      "required": [
        "proposalId",
        "proposerId",
        "proposalState",
        "ballotCount"
      ]
    },
    "ProposalActions": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "enum": [
            "actions"
          ],
          "x-ms-enum": {
            "modelAsString": false
          },
          "description": "TODO SINGLETON IS THIS VISIBLE?"
        },
        "actions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Action"
          },
          "x-ms-identifiers": [],
          "x-typespec-name": "Action[]",
          "description": "A list of actions to apply. Each action is considered in-order for both proposal and execution of the proposal. All actions are validated and, if the proposal is accepted, applied atomically.",
          "readOnly": true
        }
      },
      "description": "The list of actions contained in a proposal.",
      "required": [
        "key",
        "actions"
      ]
    },
    "ProposalState": {
      "type": "string",
      "description": "Possible states for a proposal.",
      "enum": [
        "Open",
        "Accepted",
        "Withdrawn",
        "Rejected",
        "Failed",
        "Dropped"
      ],
      "x-ms-enum": {
        "name": "ProposalState",
        "modelAsString": true,
        "values": [
          {
            "name": "Open",
            "value": "Open",
            "description": "Proposal is active and can be voted on."
          },
          {
            "name": "Accepted",
            "value": "Accepted",
            "description": "Proposal passed a successful vote and was enacted."
          },
          {
            "name": "Withdrawn",
            "value": "Withdrawn",
            "description": "Proposal was removed by proposing member. Will never be enacted."
          },
          {
            "name": "Rejected",
            "value": "Rejected",
            "description": "Proposal was rejected by vote. Will never be enacted."
          },
          {
            "name": "Failed",
            "value": "Failed",
            "description": "Proposal passed a successful vote, but its proposed actions failed. Will never be enacted."
          },
          {
            "name": "Dropped",
            "value": "Dropped",
            "description": "Proposal was open when its semantics were potentially changed (code or constitution were modified), so it was automatically invalidated."
          }
        ]
      }
    },
    "StateDigest": {
      "type": "object",
      "properties": {
        "memberId": {
          "type": "string",
          "description": "Identifier for member this stateDigest applies to.",
          "format": "hex",
          "maxLength": 64,
          "readOnly": true
        },
        "stateDigest": {
          "type": "string",
          "description": "TODO",
          "format": "hex",
          "maxLength": 64
        }
      },
      "description": "TODO",
      "required": [
        "memberId",
        "stateDigest"
      ]
    },
    "TxInfo": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/TxStatus",
          "description": "Status of this transaction"
        },
        "transactionId": {
          "type": "string",
          "description": "Identifier of this transaction, containing view and sequence number.",
          "pattern": "^[0-9]+\\.[0-9]+$",
          "readOnly": true
        }
      },
      "description": "Description of a transaction",
      "required": [
        "status",
        "transactionId"
      ]
    },
    "TxStatus": {
      "type": "string",
      "description": "Possible states for a CCF transaction. See docs for details: https://microsoft.github.io/CCF/main/use_apps/verify_tx.html#checking-for-commit",
      "enum": [
        "Unknown",
        "Pending",
        "Committed",
        "Invalid"
      ],
      "x-ms-enum": {
        "name": "TxStatus",
        "modelAsString": true
      }
    },
    "Versions": {
      "type": "string",
      "enum": [
        "0.0.1-preview"
      ],
      "x-ms-enum": {
        "name": "Versions",
        "modelAsString": true
      }
    }
  },
  "parameters": {
    "Azure.Core.Foundations.ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "description": "The API version to use for this operation.",
      "x-ms-client-name": "apiVersion",
      "minLength": 1,
      "type": "string",
      "x-ms-parameter-location": "method"
    }
  }
}
