Running CCF Applications
========================

.. note:: Before starting a CCF sandbox environment, make sure that:

    - The CCF runtime environment has successfully been setup (see :doc:`/operations/run_setup`).
    - CCF is installed (see :doc:`/build_apps/install_bin`)

The quickest way to start a CCF sandbox is to use the ``sandbox.sh`` script available as part of the CCF install, specifying the :doc:`enclave image </build_apps/index>` to run.

The script creates a new one node CCF test network running locally. All the governance requests required to open the network to users are automatically issued.

For example, deploying the generic JS application:

.. code-block:: bash

    $ /opt/ccf/bin/sandbox.sh [-p libjs_generic]
    Setting up Python environment...
    Python environment successfully setup
    [16:14:05.294] Starting 1 CCF node...
    [16:14:05.295] Virtual mode enabled
    [16:14:10.010] Started CCF network with the following nodes:
    [16:14:10.011]   Node [0] = https://127.0.0.1:8000
    [16:14:10.011] You can now issue business transactions to the opt/ccf/lib/libjs_generic application.
    [16:14:10.011] Loaded JS application: /opt/ccf/samples/logging/js
    [16:14:10.011] Keys and certificates have been copied to the common folder: ./workspace/sandbox_common
    [16:14:10.011] See https://microsoft.github.io/CCF/main/use_apps/issue_commands.html for more information.
    [16:14:10.011] Press Ctrl+C to shutdown the network.

.. note::

    - ``sandbox.sh`` defaults to using CCF's `virtual` mode, which does not require or make use of SGX. To load debug or release enclaves and make use of SGX, ``--enclave-type`` must be set to the right value, for example: ``sandbox.sh --enclave-type release -p ./libjs.enclave.so.signed``
    - The ``--verbose`` argument can be used to display all commands issued by operators and members to start the network.

The log files (``out`` and ``err``) and ledger directory (``<node_id>.ledger``) for each CCF node can be found under ``./workspace/sandbox_<node_id>``.

.. note:: The first time the command is run, a Python virtual environment will be created. This may take a few seconds. It will not be run the next time the ``sandbox.sh`` script is started.

In a different terminal, using the local IP address and port of the CCF nodes displayed by the command (e.g. ``https://127.0.0.1:8000`` for node ``0``), it is then possible for users to :ref:`issue business requests <use_apps/issue_commands:Issuing Commands>`.

Sandbox recovery
----------------

The ``sandbox.sh`` script can also be used to automatically recover a defunct network, as per the steps described :ref:`here <governance/accept_recovery:Accepting Recovery and Submitting Shares>`. The ledger to be recovered (``--ledger-dir``) and the directory containing the members and users identities (``--common-dir``) should be passed as arguments to the script.

Additionally, if snapshots were generated by the defunct service, the recovery procedure can be significantly sped up by re-starting from the latest available snapshot (``--snapshots-dir``).

.. code-block:: bash

    $ cp -r ./workspace/sandbox_0/0.ledger .
    $ cp -r ./workspace/sandbox_0/snapshots . # Optional, only if snapshots are available
    $ /opt/ccf/bin/sandbox.sh --recover --ledger-dir 0.ledger --common-dir ./workspace/sandbox_common/ [--snapshots-dir snapshots]
    Setting up Python environment...
    Python environment successfully setup
    [16:24:29.563] Starting 1 CCF node...
    [16:24:29.563] Recovering network from:
    [16:24:29.563]  - Common directory: ./workspace/sandbox_common/
    [16:24:29.563]  - Ledger: 0.ledger
    [16:24:29.563] No available snapshot to recover from. Entire transaction history will be replayed.
    [16:24:32.885] Started CCF network with the following nodes:
    [16:24:32.885]   Node [0] = https://127.0.0.1:8000
    [16:14:10.011] You can now issue business transactions to the opt/ccf/lib/libjs_generic application.
    [16:14:10.011] Loaded JS application: /opt/ccf/samples/logging/js
    [16:14:10.011] Keys and certificates have been copied to the common folder: ./workspace/sandbox_common
    [16:24:32.885] See https://microsoft.github.io/CCF/main/use_apps/issue_commands.html for more information.
    [16:24:32.885] Press Ctrl+C to shutdown the network.

The effects of transactions committed by the defunct network should then be recovered. Users can also :ref:`issue new business requests <use_apps/issue_commands:Issuing Commands>`.

.. note:: The ``--ledger-recovery-timeout`` argument should be used to specify the maximum timeout (in seconds) that the script will wait for CCF to recover the ledger. Depending on the size of the ledger to recover, this timeout may have to be set to a large value.

Debugging
---------

To connect a debugger to a CCF node, the configuration passed to ``oesign sign`` must have debugging enabled  (``Debug=1``). This `must` be disabled for production enclaves, to ensure confidentiality is maintained. If using the ``sign_app_library`` function defined in ``ccf_app.cmake``, two variants will be produced for each enclave. ``name.enclave.so.debuggable`` will have debugging enabled (meaning a debugger may be attached - the optimisation level is handled independently), while ``name.enclave.so.signed`` produces a final debugging-disabled enclave. The produced binaries are otherwise identical.

Additionally, the ``cchost`` binary must be told that the enclave type is debug, via the ``enclave.type`` configuration option (set to ``"debug"``).

Integration Tests
-----------------

The ``sandbox.sh`` script can be a helpful element of infrastructure to execute Integration Tests against a CCF test network running a particular application (see :ccf_repo:`test_install.sh </tests/test_install.sh>` script as example).

``test_install.sh`` illustrates how to wait for the sandbox to be :ccf_repo:`ready </tests/test_install.sh#L48>` before issuing application transactions, how to shut it down cleanly, and how to trigger a recovery. Recovering a test network can be a useful way to inspect post-test application test.

Performance Tests
-----------------

``sandbox.sh`` can be equally useful for performance testing, for example with a load testing tool such as `vegeta <https://github.com/tsenart/vegeta>`_:

.. code-block:: bash

    $ /opt/ccf/bin/sandbox.sh --package ./liblogging.virtual.so
    ...
    [16:14:10.011]   Node [0] = https://127.0.0.1:8000
    ...
    [16:14:10.011] Keys and certificates have been copied to the common folder: /data/src/CCF/build/workspace/sandbox_common
    ...

.. code-block:: bash

    # Extracted from the output of sandbox.sh, above.
    $ export SCDIR=/data/src/CCF/build/workspace/sandbox_common
    $ export VEGETA=/opt/vegeta/vegeta
    $ $VEGETA attack --targets sample_targets.json
                     --format json --duration 10s \
                     --cert $SCDIR/user0_cert.pem \
                     --key $SCDIR/user0_privk.pem \
                     --root-certs $SCDIR/service_cert.pem | /opt/vegeta/vegeta report

Where ``sample_targets.json`` is a file containing some sample requests to be sent as load testing, for example:

.. code-block:: json

    {"method": "POST", "url": "https://127.0.0.1:8000/app/log/private", "header": {"Content-Type": ["application/json"]}, "body": "eyJpZCI6IDAsICJtc2ciOiAiUHJpdmF0ZSBtZXNzYWdlOiAwIn0="}
    {"method": "GET", "url": "https://127.0.0.1:8000/app/log/private?id=0", "header": {"Content-Type": ["application/json"]}}