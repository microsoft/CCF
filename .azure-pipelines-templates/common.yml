jobs:
  - job: ${{ parameters.target }}_${{ parameters.suffix }}
    timeoutInMinutes: 120
    displayName: "${{ parameters.target }} ${{ parameters.suffix }}"
    dependsOn: ${{ parameters.depends_on }}
    condition: and(succeeded(), eq(dependencies.configure.outputs['setVarStep.docOnly'], 'false'))

    ${{ insert }}: ${{ parameters.env }}

    steps:
      - script: |
          sudo rm -rf build
        displayName: "Cleanup"

      - checkout: self
        clean: true
        fetchDepth: 0
        fetchTags: true

      - template: platform.yml
        parameters:
          target: "${{ parameters.target }}"

      - ${{ if eq(parameters.installExtendedTestingTools, true) }}:
          - template: install_extended_testing_tools.yml

      - ${{ if eq(parameters.code_ql_enabled, true) }}:
          - task: CodeQL3000Init@0
            displayName: CodeQL Initialize
            # variables:
            #   # TODO: Revisit these options
            #   # Do not let CodeQL3000 Extension gate scan frequency.
            #   - Codeql.Cadence: 0
            #   # Enable CodeQL3000 unconditionally so it may be run on any branch.
            #   - Codeql.Enabled: true
            #   # Ignore the small amount of infrastructure Python code in this repo.
            #   - Codeql.Language: cpp
            #   # - Codeql.ExcludePathPatterns: submodules
            #   # Ignore test and infrastructure code.
            #   - Codeql.SourceRoot: src
            #   # CodeQL3000 needs this plumbed along as a variable to enable TSA.
            #   # - Codeql.TSAEnabled: ${{ eq(variables['Build.Reason'], 'Schedule') }}
            #   # Default expects tsaoptions.json under SourceRoot.
            #   # - Codeql.TSAOptionsPath: '$(Build.SourcesDirectory)/.config/tsaoptions.json'

      - ${{ if not(eq(parameters.suffix, 'ScanBuild')) }}:
          - template: cmake.yml
            parameters:
              cmake_args: "${{ parameters.cmake_args }}"
              cmake_env: "${{ parameters.cmake_env }}"

          - template: ninja.yml
            parameters:
              cmake_args: "${{ parameters.cmake_args }}"

          - ${{ if not(and(eq(parameters.suffix, 'Release'), eq(parameters.target, 'SNPCC'))) }}:
              - template: test.yml
                parameters:
                  suffix: ${{ parameters.suffix }}
                  ctest_filter: ${{ parameters.ctest_filter }}
                  suite_name_suffix: "${{ parameters.target }} ${{ parameters.suffix }}"
                  ctest_timeout: ${{ parameters.ctest_timeout }}

          - template: misc.yml
            parameters:
              suite_name_suffix: "${{ parameters.target }}_${{ parameters.suffix }}"

      - ${{ if eq(parameters.suffix, 'Debug') }}:
          - template: trace_validation.yml

      - ${{ if eq(parameters.suffix, 'ScanBuild') }}:
          - template: scan_build.yml

      - ${{ if eq(parameters.suffix, 'Perf') }}:
          - template: push_perf_data.yml

      - ${{ if eq(parameters.suffix, 'Release') }}:
          - template: install_deb.yml
            parameters:
              target: "${{ parameters.target }}"

      - ${{ if and(eq(parameters.suffix, 'Release'), eq(parameters.target, 'SGX')) }}:
          - template: cg.yml
          - template: publish_tls_report.yml
          - template: publish_compatibility_report.yml
          - template: install_others.yml
          - template: publish_sbom.yml

      - ${{ if and(eq(parameters.suffix, 'Unsafe'), eq(parameters.target, 'SGX')) }}:
          - template: install_deb.yml

      - ${{ if eq(parameters.code_ql_enabled, true) }}:
          - task: CodeQL3000Finalize@0
            displayName: CodeQL Finalize
