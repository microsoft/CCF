parameters:
  suite_name_suffix: ""
  ctest_filter: ""
  ctest_timeout: "240"
  suffix: ""

steps:
  - script: |
      set -ex
      ASAN_SYMBOLIZER=/usr/bin/llvm-symbolizer-15
      export ASAN_SYMBOLIZER_PATH=$(realpath ${ASAN_SYMBOLIZERS})
      ./tests.sh -VV --timeout ${{ parameters.ctest_timeout }} --no-compress-output -T Test ${{ parameters.ctest_filter }}
    env:
      METRICS_MONGO_CONNECTION: $(METRICS_MONGO_CONNECTION)
      CTEST_TIMEOUT: "${{ parameters.ctest_timeout }}"
    displayName: CTest
    workingDirectory: build

  # Only run privileged tests in container environment
  - ${{ if ne(parameters.suffix, 'Perf') }}:
      - script: |
          set -ex
          sudo bash -c "source env/bin/activate && ctest -VV --timeout ${{ parameters.ctest_timeout }} --no-compress-output -L partitions -C partitions"
        env:
          CTEST_TIMEOUT: "${{ parameters.ctest_timeout }}"
        condition: succeededOrFailed()
        displayName: "CTest Partitions"
        workingDirectory: build

      # This unconditional step is necessary as workspace files survive the container
      # in which they are created
      - script: |
          set -ex
          ci_user=$(whoami)
          mkdir -p workspace # Prevent chown command from failing
          sudo chown -R $ci_user: workspace
        condition: always()
        displayName: "Change root files ownership to ci user"
        workingDirectory: build

  # If a test fails, crudely upload nodes' logs for all tests
  - task: CopyFiles@2
    inputs:
      contents: "**/?(*out|*err)"
      sourceFolder: $(Build.SourcesDirectory)/build/workspace
      targetFolder: $(Build.ArtifactStagingDirectory)
    condition: or(failed(), canceled())
    displayName: "Copy logs (only on failure)"

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)
      artifactName: "workspace ${{ parameters.suite_name_suffix }}"
    condition: or(failed(), canceled())
    displayName: "Upload logs (only on failure)"

  - script: |
      set -ex
      sed -i -r "s/\[NON-XML-CHAR-0x1B\]\[([0-9]*)m//g" Testing/*/Test.xml
    displayName: "Remove color codes"
    workingDirectory: build

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: cTest
      testResultsFiles: "**/Test.xml"
      testRunTitle: "${{ parameters.suite_name_suffix }}"
      platform: "$(Agent.MachineName)"
    condition: succeededOrFailed()
