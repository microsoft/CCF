parameters:
  target: ["Virtual", "SGX"]

  env:
    Hosted:
      container: virtual
      pool:
        vmImage: ubuntu-20.04
    Virtual:
      container: virtual
      pool: ado-virtual-ccf-sub
    SGX:
      container: sgx
      pool: ado-sgx-ccf-sub-backup
    SNPCC:
      container: snp
      pool: ado-virtual-ccf-sub

  build:
    common:
      cmake_args: ""
      cmake_env: ""
      ninja_targets: "default"
    Virtual:
      cmake_args: "-DCOMPILE_TARGET=virtual"
      cmake_env: "CC=`which clang-15` CXX=`which clang++-15`"
      ninja_targets: "default"
    SGX:
      cmake_args: "-DCOMPILE_TARGET=sgx"
      cmake_env: ""
      ninja_targets: "default"
    SNPCC:
      cmake_args: "-DCOMPILE_TARGET=snp -DLVI_MITIGATIONS=OFF -DLONG_TESTS=OFF"
      cmake_env: "CC=`which clang-15` CXX=`which clang++-15`"
      ninja_targets: "default"
    debug:
      cmake_args: "-DCMAKE_BUILD_TYPE=Debug -DLVI_MITIGATIONS=OFF -DVERBOSE_LOGGING=ON"
      cmake_env: ""
      ninja_targets: "default"
    perf:
      cmake_args: '-DBUILD_UNIT_TESTS=OFF -DBUILD_TPCC=ON -DDISTRIBUTE_PERF_TESTS="-n local://localhost -n local://localhost"'
      cmake_env: ""
      ninja_targets: "default"
    release:
      cmake_args: "-DCLIENT_PROTOCOLS_TEST=ON -DLONG_TESTS=ON"
      cmake_env: ""
      ninja_targets: "default"
    unsafe:
      cmake_args: "-DLVI_MITIGATIONS=OFF -DVERBOSE_LOGGING=ON -DUNSAFE_VERSION=ON"
      cmake_env: ""
      ninja_targets: "default"
    tracing:
      cmake_args: "-DCCF_RAFT_TRACING=ON"
      cmake_env: ""
      ninja_targets: "raft_driver"

  test:
    Virtual:
      ctest_args: '-LE "benchmark|perf|protocolstest|vegeta|suite"'
    SGX:
      ctest_args: '-LE "benchmark|perf|protocolstest|vegeta|suite"'
    perf:
      ctest_args: '-L "benchmark|perf|vegeta"'
    release:
      ctest_args: '-LE "benchmark|perf"'
    virtual_perf:
      ctest_args: '-L "perf|vegeta"'
    tracing:
      ctest_args: '-L "raft_scenario"'

jobs:
  # Debug
  - ${{ each target in parameters.target }}:
      - template: common.yml
        parameters:
          target: ${{ target }}
          env: ${{ parameters.env[target] }}
          cmake_args: "${{ parameters.build.common.cmake_args }} ${{ parameters.build.debug.cmake_args }} ${{ parameters.build[target].cmake_args }}"
          cmake_env: "${{ parameters.build[target].cmake_env }}"
          suffix: "Debug"
          artifact_name: "${{ target }}_Debug"
          ctest_filter: "${{ parameters.test[target].ctest_args }}"
          depends_on: configure
          installExtendedTestingTools: false

  # Tracing
  - template: common.yml
    parameters:
      target: "Virtual"
      env: ${{ parameters.env.Virtual }}
      cmake_args: "${{ parameters.build.common.cmake_args }} ${{ parameters.build.debug.cmake_args }} ${{ parameters.build.Virtual.cmake_args }} ${{ parameters.build.tracing.cmake_args }}"
      cmake_env: "${{ parameters.build.Virtual.cmake_env }}"
      suffix: "Tracing"
      artifact_name: "Virtual_Tracing"
      ctest_filter: "${{ parameters.test.tracing.ctest_args }}"
      depends_on: configure
      installExtendedTestingTools: false
      ninja_targets: "${{ parameters.build.tracing.ninja_targets }}"

  # Performance
  - ${{ if eq(parameters.perf_tests, 'run') }}:
      - template: common.yml
        parameters:
          target: SGX
          env: ${{ parameters.env.SGX }}
          cmake_args: "${{ parameters.build.common.cmake_args }} ${{ parameters.build.perf.cmake_args }} ${{ parameters.build.SGX.cmake_args }}"
          suffix: "Perf"
          artifact_name: "SGX_Perf"
          ctest_filter: "${{ parameters.test.perf.ctest_args }}"
          depends_on: configure
          installExtendedTestingTools: false

  - ${{ if eq(parameters.perf_tests, 'run') }}:
      - template: common.yml
        parameters:
          target: Virtual
          env: ${{ parameters.env.Virtual }}
          cmake_args: "${{ parameters.build.common.cmake_args }} ${{ parameters.build.perf.cmake_args }} ${{ parameters.build.Virtual.cmake_args }}"
          cmake_env: "${{ parameters.build.Virtual.cmake_env }}"
          suffix: "Perf"
          artifact_name: "Virtual_Perf"
          ctest_filter: "${{ parameters.test.virtual_perf.ctest_args }}"
          depends_on: configure
          installExtendedTestingTools: false

  - ${{ if eq(parameters.perf_tests, 'run') }}:
      - template: common.yml
        parameters:
          target: Virtual
          env: ${{ parameters.env.Virtual }}
          cmake_args: "${{ parameters.build.common.cmake_args }} ${{ parameters.build.perf.cmake_args }} ${{ parameters.build.Virtual.cmake_args }} -DWORKER_THREADS=2"
          cmake_env: "${{ parameters.build.Virtual.cmake_env }}"
          suffix: "Perf_MultiThreaded"
          artifact_name: "Virtual_Perf_MultiThreaded"
          ctest_filter: "-R pi_basic_mt"
          depends_on: configure
          installExtendedTestingTools: false

  - ${{ if eq(parameters.perf_tests, 'run') }}:
      - template: common.yml
        parameters:
          target: SGX
          env: ${{ parameters.env.SGX }}
          cmake_args: "${{ parameters.build.common.cmake_args }} ${{ parameters.build.perf.cmake_args }} ${{ parameters.build.SGX.cmake_args }} -DWORKER_THREADS=2"
          suffix: "Perf_MultiThreaded"
          artifact_name: "SGX_Perf_MultiThreaded"
          ctest_filter: "-R pi_basic_mt"
          depends_on: configure
          installExtendedTestingTools: false

  - ${{ if eq(parameters.perf_tests, 'run') }}:
      - template: simulation.yml
        parameters:
          target: Virtual
          env: ${{ parameters.env.Virtual }}
          installExtendedTestingTools: false
          metrics: true
          depends_on:
            - configure
