steps:
  - script: |
      set -ex
      sudo apt update
      sudo apt install -y default-jre parallel
      python3 ./tla/install_deps.py
    displayName: "Install TLA dependencies"

  - ${{ if eq(parameters.suffix, 'Tracing') }}:
      - script: |
          set -ex
          set -o pipefail
          cd tla/
          mkdir -p traces/consensus
          mv ../build/consensus traces/
          parallel 'JVM_OPTIONS=-Dtlc2.tool.queue.IStateQueue=StateDeque JSON={} ./tlc.sh -dump dot,constrained,colorize,actionlabels {}.dot -dumpTrace tla {}.trace.tla -dumpTrace json {}.trace.json consensus/Traceccfraft.tla' ::: $(ls traces/consensus/*.ndjson)
        displayName: "Run Consensus Trace Validation"

  - ${{ if eq(parameters.suffix, 'Debug') }}:
      - script: |
          set -ex
          set -o pipefail
          cd tla/
          mkdir -p traces/consistency
          mv ../build/consistency/trace.ndjson traces/consistency/
          # Note that -Dtlc2.tool.queue.IStateQueue=StateDeque effectively
          # causes TLC to run a depth-first search rather than a breadth-first search, which tends to
          # be more efficient in the case of trace validation including non-deterministic steps.
          JVM_OPTIONS=-Dtlc2.tool.queue.IStateQueue=StateDeque JSON=traces/consistency/trace.ndjson ./tlc.sh -dump dot,constrained,colorize,actionlabels traces/consistency/trace.dot -dumpTrace tla traces/consistency/trace.trace.tla -dumpTrace json traces/consistency/trace.trace.json consistency/TraceMultiNodeReads.tla
          ls traces
        displayName: "Run Consistency Trace Validation"

  - task: PublishPipelineArtifact@1
    inputs:
      artifactName: "Trace Validation Output ${{ parameters.suffix }}"
      targetPath: tla/traces
    condition: or(failed(), canceled())
