parameters:
  secondaries:
    image: ""
    count: 0
    path: ""

jobs:
  - job: generate_ssh_key
    displayName: "Generate SSH Key"
    variables:
      Codeql.SkipTaskAutoInjection: true
      skipComponentGovernanceDetection: true
    pool:
      vmImage: ubuntu-20.04
    steps:
      - checkout: none

      - template: generate_ssh_key.yml

  - job: deploy_primary_aci
    displayName: "Deploy ACI"
    dependsOn:
      - generate_ssh_key
    variables:
      Codeql.SkipTaskAutoInjection: true
      skipComponentGovernanceDetection: true
      sshKey: $[ dependencies.generate_ssh_key.outputs['generate_ssh_key.sshKey'] ]
    pool:
      name: ado-virtual-ccf-sub # To build CCF quickly
      demands:
        - WorkFolder -equals /mnt/storage
    container: virtual

    steps:
      - checkout: self
        clean: true
        fetchDepth: 0
        fetchTags: true

      - script: |
          set -ex
          env
        name: print_env
        displayName: "Print Environment Variables"

      - template: install_ssh_key.yml
        parameters:
          ssh_key: $(sshKey)

      - template: azure_cli.yml
        parameters:
          managed_identity_id: $(CCF_SNP_CI_MANAGED_IDENTITY_ID)

      - script: |
          set -ex
          docker login -u $ACR_TOKEN_NAME -p $ACR_CI_PUSH_TOKEN_PASSWORD $ACR_REGISTRY
          docker pull $ACR_REGISTRY/ccf/ci:2024-04-03-snp-clang15
          docker build -f docker/ccf_ci_built . --build-arg="base=$BASE_IMAGE" --build-arg="platform=snp" -t $ACR_REGISTRY/ccf/ci:pr-`git rev-parse HEAD`
          docker push $ACR_REGISTRY/ccf/ci:pr-`git rev-parse HEAD`
        name: build_ci_image
        displayName: "Build CI SNP container"
        env:
          ACR_TOKEN_NAME: ci-push-token
          ACR_CI_PUSH_TOKEN_PASSWORD: $(ACR_CI_PUSH_TOKEN_PASSWORD)
          ACR_REGISTRY: ccfmsrc.azurecr.io
          BASE_IMAGE: ccfmsrc.azurecr.io/ccf/ci:2024-04-03-snp-clang15

      - script: |
          set -ex
          python3.8 -m venv ./scripts/azure_deployment/.env
          source ./scripts/azure_deployment/.env/bin/activate
          pip install -r ./scripts/azure_deployment/requirements.txt
          python3.8 scripts/azure_deployment/arm_template.py deploy aci \
            --subscription-id $(CCF_AZURE_SUBSCRIPTION_ID) \
            --resource-group ccf-aci \
            --region northeurope \
            --aci-type dynamic-agent \
            --deployment-name ci-$(Build.BuildNumber) \
            --aci-image ccfmsrc.azurecr.io/ccf/ci:pr-`git rev-parse HEAD` \
            --ports 22 \
            --aci-setup-timeout 300 \
            --aci-private-key-b64 $(sshKey) \
            --out ~/aci_ips
          # Set a variable "ipAddresses" which is a list of `<container group name> <IP address>` separated by newlines.
          source ./scripts/azure_deployment/escape_data.sh # Include escape_data to handle newlines.
          echo "##vso[task.setvariable variable=ipAddresses;isOutput=true]$(escape_data "$(cat ~/aci_ips)")"
        name: deploy_primary_aci
        displayName: "Deploy Primary ACI"
        env:
          CCF_AZURE_SUBSCRIPTION_ID: $(CCF_AZURE_SUBSCRIPTION_ID)

  - job: cleanup_aci
    displayName: "Cleanup ACI"
    container: virtual
    pool:
      name: ado-virtual-ccf-sub # For access to managed identity
      demands:
        - WorkFolder -equals /mnt/storage
    dependsOn:
      - generate_ssh_key
      - deploy_primary_aci
      - ${{ parameters.used_by }}
    condition: always()
    variables:
      Codeql.SkipTaskAutoInjection: true
      skipComponentGovernanceDetection: true
      IpAddresses: $[ dependencies.deploy_primary_aci.outputs['deploy_primary_aci.ipAddresses'] ]
      sshKey: $[ dependencies.generate_ssh_key.outputs['generate_ssh_key.sshKey'] ]
    steps:
      - template: install_ssh_key.yml
        parameters:
          ssh_key: $(sshKey)

      - script: |
          set -ex
          mapfile -t IP_ADDR_LIST <<< $(echo "$(IpAddresses)" | awk '{print $2}')
          for IP_ADDR in "${IP_ADDR_LIST[@]}"; do
            ssh agent@$IP_ADDR -o "StrictHostKeyChecking=no" -o ConnectTimeout=100 '
            sudo rm -rf /ccfci/workspace_$(Build.BuildNumber)
            '
          done
        name: cleanup_workspace
        displayName: "Cleanup Workspace"
        continueOnError: true

      - template: azure_cli.yml
        parameters:
          managed_identity_id: $(CCF_SNP_CI_MANAGED_IDENTITY_ID)

      - script: |
          set -ex
          python3.8 -m venv ./scripts/azure_deployment/.env
          source ./scripts/azure_deployment/.env/bin/activate
          pip install -r ./scripts/azure_deployment/requirements.txt
          python3.8 scripts/azure_deployment/arm_template.py remove aci \
          --subscription-id $(CCF_AZURE_SUBSCRIPTION_ID) \
          --resource-group ccf-aci \
          --aci-type dynamic-agent \
          --deployment-name ci-$(Build.BuildNumber)
        name: cleanup_primary_aci
        displayName: "Delete the primary ACIs and Azure Deployments"
        continueOnError: true
        env:
          CCF_AZURE_SUBSCRIPTION_ID: $(CCF_AZURE_SUBSCRIPTION_ID)
