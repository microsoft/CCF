jobs:
  - job: deploy_aci
    displayName: "Deploy ACI"
    pool:
      vmImage: ubuntu-20.04
    steps:
      - script: |
          env
        name: print_env
        displayName: "Print Environment Variables"

      - script: |
          set -ex
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          echo "##vso[task.setvariable variable=hostPrivKey;isOutput=true;issecret=true]`base64 -w 0 ~/.ssh/id_rsa`"
        name: generate_ssh_key
        displayName: "Generate SSH Key"

      - template: azure_cli.yml
        parameters:
          app_id: ${{ parameters.app_id }}
          service_principal_password: ${{ parameters.service_principal_password }}
          tenant: ${{ parameters.tenant }}

      - script: |
          set -ex
          RETRIES=500
          HEAD_SHA=`git rev-parse HEAD`
          if [ $(System.PullRequest.PullRequestId) != "" ]; then
            # If this is the case, we're running in a PR, and the SHA we really want is in the
            # commit message of the last commit (which merges it into target)
            LAST_COMMIT=(`git log -1 --pretty=%B`)
            HEAD_SHA=${LAST_COMMIT[1]}
          fi
          echo "##vso[task.setvariable variable=gitSha;isOutput=true]$HEAD_SHA"
          until [ $RETRIES -eq 0 ] || [[ `az acr repository show-tags -n ccfmsrc --repository ccf/ci` == *"$HEAD_SHA"* ]]
          do
            sleep 10
            echo "$(( RETRIES-- )) tries remaining"
          done
        name: wait_for_image
        displayName: "Wait for CI Container Building"
      
      - ${{ if eq(parameters.deploy_attestation_container, true) }}:
        - script: |
            set -ex
            cd attestation-container
            docker build -t attestation-container .
            az acr login --name attestationcontainerregistry
            login_server=$(az acr show --name attestationcontainerregistry --query loginServer --output tsv)
            image_version="ci-$(echo $(Build.BuildNumber) | sed 's/\.//g')"
            docker tag attestation-container $login_server/attestation-container:$image_version
            docker push $login_server/attestation-container:$image_version
            echo "##vso[task.setvariable variable=ver;isoutput=true]$image_version"
          name: build_and_push_attestation_container
          displayName: "Build and Push Attestation Container"

      - script: |
          set -ex
          if [ ${{ parameters.deploy_attestation_container }} == "True" ]; then
            resource_group="attestationContainer"
          else
            resource_group="ccf-aci"
          fi
          echo "##vso[task.setvariable variable=resource_group;isoutput=true]$resource_group"
          python3.8 scripts/azure_deployment/arm_template.py deploy aci --subscription-id $(CCF_AZURE_SUBSCRIPTION_ID) --resource-group $RESOURCE_GROUP --aci-type dynamic-agent --deployment-name ci-$(Build.BuildNumber) --aci-image ccfmsrc.azurecr.io/ccf/ci:pr-$(wait_for_image.gitSha) --attestation-container-e2e ${{ parameters.deploy_attestation_container }} > ~/aci_ips
          # Escape newlines: https://learn.microsoft.com/en-us/azure/devops/pipelines/process/set-variables-scripts?view=azure-devops&tabs=bash
          escape_data() {
          local data=$1
          data="${data//'%'/'%AZP25'}"
          data="${data//$'\n'/'%0A'}"
          data="${data//$'\r'/'%0D'}"
          echo "$data"
          }
          # Set a variable "ipAddresses" which is a list of `<container group name> <IP address>` separated by newlines.
          echo "##vso[task.setvariable variable=ipAddresses;isOutput=true]$(escape_data "$(cat ~/aci_ips)")"
        name: deploy_aci
        displayName: "Deploy ACI"
        env:
          CCF_AZURE_SUBSCRIPTION_ID: $(CCF_AZURE_SUBSCRIPTION_ID)

      - script: |
          set -ex
          mapfile -t IP_ADDR_LIST <<< $(echo "$(deploy_aci.ipAddresses)" | awk '{print $2}')
          for IP_ADDR in "${IP_ADDR_LIST[@]}"; do
            echo -e "Testing connection with $IP_ADDR"
            for i in {1..3}; do ssh agent@$IP_ADDR -o "StrictHostKeyChecking no" 'echo "Connected successfully"' && break || echo "Connection failed, ACI may still be spinning up, retrying"; done
          done
        name: test_ssh_connection
        displayName: "Test SSH Connection to ACI"

  - job: cleanup_aci
    displayName: "Cleanup ACI"
    pool:
      vmImage: ubuntu-20.04
    dependsOn:
      - deploy_aci
      - ${{ parameters.used_by }}
    condition: always()
    variables:
      resource_group: $[ dependencies.deploy_aci.outputs['deploy_aci.resource_group'] ]
    steps:
      - template: azure_cli.yml
        parameters:
          app_id: $(CCF_SNP_CI_APP_ID)
          service_principal_password: $(CCF_SNP_CI_SERVICE_PRINCIPAL_PASSWORD)
          tenant: $(CCF_SNP_CI_TENANT)

      - script: |
          set -ex
          python3.8 scripts/azure_deployment/arm_template.py remove aci --subscription-id $(CCF_AZURE_SUBSCRIPTION_ID) --resource-group $resource_group --aci-type dynamic-agent --deployment-name ci-$(Build.BuildNumber)
        name: cleanup_aci
        displayName: "Delete the ACI and Azure Deployment"
  
  - ${{ if eq(parameters.deploy_attestation_container, true) }}:
    - job: cleanup_attestation_container_image
      displayName: "Cleanup Attestation Container image"
      pool:
        vmImage: ubuntu-20.04
      dependsOn:
        - deploy_aci
        - ${{ parameters.used_by }}
      variables:
        image_version: $[ dependencies.deploy_aci.outputs['build_and_push_attestation_container.ver'] ]
      condition: always()
      steps:
        - template: azure_cli.yml
          parameters:
            app_id: ${{ parameters.app_id }}
            service_principal_password: ${{ parameters.service_principal_password }}
            tenant: ${{ parameters.tenant }}

        - script: |
            set -ex
            az acr repository delete --name attestationcontainerregistry --image attestation-container:$image_version --yes

          name: cleanup_attestation_container_image
          displayName: "Delete the container image"
