jobs:
  - job: deploy_primary_aci
    displayName: "Deploy ACI"
    variables:
      Codeql.SkipTaskAutoInjection: true
      skipComponentGovernanceDetection: true
    pool:
      name: ado-virtual-ccf-sub # To build CCF quickly
      demands:
        - WorkFolder -equals /mnt/storage
    container: virtual

    steps:
      - checkout: self
        clean: true
        fetchDepth: 0
        fetchTags: true

      - template: generate_ssh_key.yml

      - template: azure_cli.yml
        parameters:
          managed_identity_id: $(CCF_SNP_CI_MANAGED_IDENTITY_ID)

      - script: |
          set -ex
          az acr login --name $ACR_REGISTRY_RESOURCE_NAME
          docker pull $BASE_IMAGE
          docker build -f docker/ccf_ci_built . --build-arg="base=$BASE_IMAGE" -t $ACR_REGISTRY/ccf/ci:pr-`git rev-parse HEAD`
          docker push $ACR_REGISTRY/ccf/ci:pr-`git rev-parse HEAD`
        name: build_ci_image
        displayName: "Build CI SNP container"
        env:
          ACR_REGISTRY_RESOURCE_NAME: ccfmsrc
          ACR_REGISTRY: ccfmsrc.azurecr.io
          BASE_IMAGE: ghcr.io/microsoft/ccf/ci/default:build-14-01-2025

      - script: |
          set -ex
          az acr login --name $ACR_REGISTRY_RESOURCE_NAME
          python3 -m venv ./scripts/azure_deployment/.env
          source ./scripts/azure_deployment/.env/bin/activate
          pip install -r ./scripts/azure_deployment/requirements.txt
          python3 scripts/azure_deployment/arm_template.py deploy aci \
            --subscription-id $(CCF_AZURE_SUBSCRIPTION_ID) \
            --resource-group ccf-aci \
            --region eastus \
            --aci-type dynamic-agent \
            --deployment-name ci-$(Build.BuildNumber) \
            --aci-image ccfmsrc.azurecr.io/ccf/ci:pr-`git rev-parse HEAD` \
            --managed-identity $(CCF_SNP_CI_MANAGED_IDENTITY_ID) \
            --ports 22 \
            --memory-gb 64 \
            --core-count 16 \
            --aci-setup-timeout 300 \
            --out ~/aci_ips
          # Create a ~/ipAddresses files which is a list of `<container group name> <IP address>` separated by newlines.
          source ./scripts/azure_deployment/escape_data.sh # Include escape_data to handle newlines.
          escape_data "$(cat ~/aci_ips)" > ~/ipAddresses
          cat ~/ipAddresses
        name: deploy_primary_aci
        displayName: "Deploy Primary ACI"
        env:
          ACR_REGISTRY_RESOURCE_NAME: ccfmsrc
          CCF_AZURE_SUBSCRIPTION_ID: $(CCF_AZURE_SUBSCRIPTION_ID)

      - script: |
          set -ex
          set -o pipefail
          mapfile -t IP_ADDR_LIST <<< $(cat ~/ipAddresses | awk '{print $2}')
          ssh agent@${IP_ADDR_LIST[0]} -o "StrictHostKeyChecking=no" -o ConnectTimeout=100 '
          nproc --all
          lscpu
          cat /proc/cpuinfo 
          '
        name: print_cpu_stats
        displayName: "Print CPU stats"

      - script: |
          set -ex
          set -o pipefail
          mapfile -t IP_ADDR_LIST <<< $(cat ~/ipAddresses | awk '{print $2}')
          ssh agent@${IP_ADDR_LIST[0]} -o "StrictHostKeyChecking=no" -o ConnectTimeout=100 '
          echo ENV
          env
          echo ACI_ENV
          cat /aci_env
          '
        name: print_env
        displayName: "Print Environment Variables"

      - script: |
          set -ex
          set -o pipefail
          mapfile -t IP_ADDR_LIST <<< $(cat ~/ipAddresses | awk '{print $2}')
          ssh agent@${IP_ADDR_LIST[0]} -o "StrictHostKeyChecking=no" -o ConnectTimeout=100 '
          set -ex
          cd /CCF/build
          npm config set cache /ccfci/workspace_$(Build.BuildNumber)/.npm
          WORKSPACE=/ccfci/workspace_$(Build.BuildNumber) ELECTION_TIMEOUT_MS=10000 ./tests.sh -VV -T Test -LE "benchmark|tlstest|suite|snp_flaky" -E "lts_compatibility"
          '
        name: run_ctest
        displayName: "Run CTest"

      - script: |
          set -ex
          set -o pipefail
          mapfile -t IP_ADDR_LIST <<< $(cat ~/ipAddresses | awk '{print $2}')
          ssh agent@${IP_ADDR_LIST[0]} -o "StrictHostKeyChecking=no" -o ConnectTimeout=100 '
          dmesg
          '
        name: run_dmesg
        displayName: "Run DMesg"
        condition: always()

      - script: |
          set -ex
          set -o pipefail
          mapfile -t IP_ADDR_LIST <<< $(cat ~/ipAddresses | awk '{print $2}')
          ssh agent@${IP_ADDR_LIST[0]} -o "StrictHostKeyChecking=no" -o ConnectTimeout=100 '
          set -ex
          cd /CCF
          # Remove irrelevant and bulky data from workspace before uploading
          ./scripts/prune_workspace.sh /ccfci/workspace_$(Build.BuildNumber)
          # Create single compressed archive for faster transfer
          tar -C /ccfci -caf /ccfci/workspace_$(Build.BuildNumber).tar.gz ./workspace_$(Build.BuildNumber)
          '
        name: gather_workspace
        displayName: "Gather workspace"
        condition: always()

      - script: |
          set -ex
          set -o pipefail
          mapfile -t IP_ADDR_LIST <<< $(cat ~/ipAddresses | awk '{print $2}')
          scp -r agent@${IP_ADDR_LIST[0]}:/ccfci/workspace_$(Build.BuildNumber).tar.gz .
          tar -xaf ./workspace_$(Build.BuildNumber).tar.gz
        name: fetch_workspace
        displayName: "Fetch Workspace"
        condition: always()

      - task: PublishPipelineArtifact@1
        inputs:
          artifactName: "ACI Workspace"
          targetPath: workspace_$(Build.BuildNumber)
        condition: always()

      - script: |
          set -ex
          rm -rf workspace_$(Build.BuildNumber)
          mapfile -t IP_ADDR_LIST <<< $(cat ~/ipAddresses | awk '{print $2}')
          for IP_ADDR in "${IP_ADDR_LIST[@]}"; do
            ssh agent@$IP_ADDR -o "StrictHostKeyChecking=no" -o ConnectTimeout=100 '
            sudo rm -rf /ccfci/workspace_$(Build.BuildNumber)
            '
          done
        name: cleanup_workspace
        displayName: "Cleanup Workspace"
        continueOnError: true
        condition: always()

      - script: |
          set -ex
          python3 -m venv ./scripts/azure_deployment/.env
          source ./scripts/azure_deployment/.env/bin/activate
          pip install -r ./scripts/azure_deployment/requirements.txt
          python3 scripts/azure_deployment/arm_template.py remove aci \
          --subscription-id $(CCF_AZURE_SUBSCRIPTION_ID) \
          --resource-group ccf-aci \
          --aci-type dynamic-agent \
          --deployment-name ci-$(Build.BuildNumber)
        name: cleanup_primary_aci
        displayName: "Delete the primary ACIs and Azure Deployments"
        continueOnError: true
        condition: always()
        env:
          CCF_AZURE_SUBSCRIPTION_ID: $(CCF_AZURE_SUBSCRIPTION_ID)
