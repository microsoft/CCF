jobs:
  - job: generate_ssh_key
    displayName: "Generate SSH Key"
    variables:
      Codeql.SkipTaskAutoInjection: true
      skipComponentGovernanceDetection: true
    pool:
      vmImage: ubuntu-20.04
    steps:
      - script: |
          set -ex
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          echo "##vso[task.setvariable variable=sshKey;isOutput=true;issecret=true]`base64 -w 0 ~/.ssh/id_rsa`"
        name: generate_ssh_key
        displayName: "Generate SSH Key"

  - job: deploy_aci
    displayName: "Deploy ACI"
    dependsOn:
      - generate_ssh_key
    variables:
      Codeql.SkipTaskAutoInjection: true
      skipComponentGovernanceDetection: true
      sshKey: $[ dependencies.generate_ssh_key.outputs['generate_ssh_key.sshKey'] ]
    pool:
      vmImage: ubuntu-20.04
    steps:
      - script: |
          env
        name: print_env
        displayName: "Print Environment Variables"

      - template: install_ssh_key.yml
        parameters:
          ssh_key: $(sshKey)

      - template: azure_cli.yml
        parameters:
          app_id: $(CCF_SNP_CI_APP_ID)
          service_principal_password: $(CCF_SNP_CI_SERVICE_PRINCIPAL_PASSWORD)
          tenant: $(CCF_SNP_CI_TENANT)

      - script: |
          set -ex
          RETRIES=500
          HEAD_SHA=`git rev-parse HEAD`
          if [ $(Build.SourceBranchName) == "merge" ]; then
            # If this is the case, we're running in a PR, and the SHA we really want is in the
            # commit message of the last commit (which merges it into target)
            echo "Running in a PR, getting the SHA from the commit message"
            LAST_COMMIT=(`git log -1 --pretty=%B`)
            HEAD_SHA=${LAST_COMMIT[1]}
          fi
          echo "##vso[task.setvariable variable=gitSha;isOutput=true]$HEAD_SHA"
          until [ $RETRIES -eq 0 ] || [[ `az acr repository show-tags -n ccfmsrc --repository ccf/ci` == *"$HEAD_SHA"* ]]
          do
            sleep 10
            echo "$(( RETRIES-- )) tries remaining"
          done
        name: wait_for_image
        displayName: "Wait for CI Container Building"

      - script: |
          set -ex
          python3.8 -m venv ./scripts/azure_deployment/.env
          source ./scripts/azure_deployment/.env/bin/activate
          pip install -r ./scripts/azure_deployment/requirements.txt
          python3.8 scripts/azure_deployment/arm_template.py deploy aci --subscription-id $(CCF_AZURE_SUBSCRIPTION_ID) --resource-group ccf-aci --aci-type dynamic-agent --deployment-name ci-$(Build.BuildNumber) --aci-image ccfmsrc.azurecr.io/ccf/ci:pr-$(wait_for_image.gitSha) --aci-file-share-name ccfcishare --aci-file-share-account-name ccfcistorage --aci-storage-account-key $(CCF_AZURE_STORAGE_KEY) > ~/aci_ips
          # Escape newlines: https://learn.microsoft.com/en-us/azure/devops/pipelines/process/set-variables-scripts?view=azure-devops&tabs=bash
          escape_data() {
          local data=$1
          data="${data//'%'/'%AZP25'}"
          data="${data//$'\n'/'%0A'}"
          data="${data//$'\r'/'%0D'}"
          echo "$data"
          }
          # Set a variable "ipAddresses" which is a list of `<container group name> <IP address>` separated by newlines.
          echo "##vso[task.setvariable variable=ipAddresses;isOutput=true]$(escape_data "$(cat ~/aci_ips)")"
        name: deploy_aci
        displayName: "Deploy ACI"
        env:
          CCF_AZURE_SUBSCRIPTION_ID: $(CCF_AZURE_SUBSCRIPTION_ID)

  - job: cleanup_aci
    displayName: "Cleanup ACI"
    pool:
      vmImage: ubuntu-20.04
    dependsOn:
      - generate_ssh_key
      - deploy_aci
      - ${{ parameters.used_by }}
    condition: always()
    variables:
      IpAddresses: $[ dependencies.deploy_aci.outputs['deploy_aci.ipAddresses'] ]
      sshKey: $[ dependencies.generate_ssh_key.outputs['generate_ssh_key.sshKey'] ]
    steps:
      - template: azure_cli.yml
        parameters:
          app_id: $(CCF_SNP_CI_APP_ID)
          service_principal_password: $(CCF_SNP_CI_SERVICE_PRINCIPAL_PASSWORD)
          tenant: $(CCF_SNP_CI_TENANT)

      - template: install_ssh_key.yml
        parameters:
          ssh_key: $(sshKey)

      - script: |
          set -ex
          mapfile -t IP_ADDR_LIST <<< $(echo "$(IpAddresses)" | awk '{print $2}')
          for IP_ADDR in "${IP_ADDR_LIST[@]}"; do
            ssh agent@$IP_ADDR -o "StrictHostKeyChecking no" '
            sudo rm -rf /ccfci/workspace_$(Build.BuildNumber)
            '
          done
        name: cleanup_workspace
        displayName: "Cleanup Workspace"

      - script: |
          set -ex
          python3.8 -m venv ./scripts/azure_deployment/.env
          source ./scripts/azure_deployment/.env/bin/activate
          pip install -r ./scripts/azure_deployment/requirements.txt
          python3.8 scripts/azure_deployment/arm_template.py remove aci --subscription-id $(CCF_AZURE_SUBSCRIPTION_ID) --resource-group ccf-aci --aci-type dynamic-agent --deployment-name ci-$(Build.BuildNumber)
        name: cleanup_aci
        displayName: "Delete the ACI and Azure Deployment"
