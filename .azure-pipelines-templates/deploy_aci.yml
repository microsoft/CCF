parameters:
  secondaries:
    image: ""
    count: 0
    path: ""

jobs:
  - job: generate_ssh_key
    displayName: "Generate SSH Key"
    variables:
      Codeql.SkipTaskAutoInjection: true
      skipComponentGovernanceDetection: true
    pool:
      vmImage: ubuntu-20.04
    steps:
      - checkout: none

      - template: generate_ssh_key.yml

  - job: deploy_primary_aci
    displayName: "Deploy ACI"
    dependsOn:
      - generate_ssh_key
    variables:
      Codeql.SkipTaskAutoInjection: true
      skipComponentGovernanceDetection: true
      sshKey: $[ dependencies.generate_ssh_key.outputs['generate_ssh_key.sshKey'] ]
    pool:
      vmImage: ubuntu-20.04
    steps:
      - script: |
          env
        name: print_env
        displayName: "Print Environment Variables"

      - template: install_ssh_key.yml
        parameters:
          ssh_key: $(sshKey)

      - template: azure_cli.yml
        parameters:
          app_id: $(CCF_SNP_CI_APP_ID)
          service_principal_password: $(CCF_SNP_CI_SERVICE_PRINCIPAL_PASSWORD)
          tenant: $(CCF_SNP_CI_TENANT)

      - script: |
          set -ex
          RETRIES=100
          HEAD_SHA=`git rev-parse HEAD`
          if [ $(Build.SourceBranchName) == "merge" ]; then
            # If this is the case, we're running in a PR, and the SHA we really want is in the
            # commit message of the last commit (which merges it into target)
            echo "Running in a PR, getting the SHA from the commit message"
            LAST_COMMIT=(`git log -1 --pretty=%B`)
            HEAD_SHA=${LAST_COMMIT[1]}
          fi
          echo "##vso[task.setvariable variable=gitSha;isOutput=true]$HEAD_SHA"
          until [ $RETRIES -eq 0 ] || [[ `az acr repository show-tags -n ccfmsrc --repository ccf/ci` == *"$HEAD_SHA"* ]]
          do
            sleep 60
            echo "$(( RETRIES-- )) tries remaining"
          done
        name: wait_for_image
        displayName: "Wait for CI Container Building"

      - script: |
          set -ex
          python3.8 -m venv ./scripts/azure_deployment/.env
          source ./scripts/azure_deployment/.env/bin/activate
          pip install -r ./scripts/azure_deployment/requirements.txt
          python3.8 scripts/azure_deployment/arm_template.py deploy aci \
            --subscription-id $(CCF_AZURE_SUBSCRIPTION_ID) \
            --resource-group ccf-aci \
            --region northeurope \
            --aci-type dynamic-agent \
            --deployment-name ci-$(Build.BuildNumber) \
            --aci-image ccfmsrc.azurecr.io/ccf/ci:pr-$(wait_for_image.gitSha) \
            --ports 22 \
            --aci-setup-timeout 300 \
            --aci-private-key-b64 $(sshKey) \
            --out ~/aci_ips
          # Set a variable "ipAddresses" which is a list of `<container group name> <IP address>` separated by newlines.
          source ./scripts/azure_deployment/escape_data.sh # Include escape_data to handle newlines.
          echo "##vso[task.setvariable variable=ipAddresses;isOutput=true]$(escape_data "$(cat ~/aci_ips)")"
        name: deploy_primary_aci
        displayName: "Deploy Primary ACI"
        env:
          CCF_AZURE_SUBSCRIPTION_ID: $(CCF_AZURE_SUBSCRIPTION_ID)

  - ${{ if not(eq(parameters.secondaries.count, 0)) }}:
      - job: deploy_secondary_aci
        displayName: "Deploy Secondary ACI"
        pool:
          vmImage: ubuntu-20.04
        dependsOn:
          - generate_ssh_key
        variables:
          Codeql.SkipTaskAutoInjection: true
          skipComponentGovernanceDetection: true
          sshKey: $[ dependencies.generate_ssh_key.outputs['generate_ssh_key.sshKey'] ]

        steps:
          - template: install_ssh_key.yml
            parameters:
              ssh_key: $(sshKey)

          - template: azure_cli.yml
            parameters:
              app_id: $(CCF_SNP_CI_APP_ID)
              service_principal_password: $(CCF_SNP_CI_SERVICE_PRINCIPAL_PASSWORD)
              tenant: $(CCF_SNP_CI_TENANT)

          - script: |
              set -ex
              RETRIES=100
              HEAD_SHA=`git rev-parse HEAD`
              if [ $(Build.SourceBranchName) == "merge" ]; then
                # If this is the case, we're running in a PR, and the SHA we really want is in the
                # commit message of the last commit (which merges it into target)
                echo "Running in a PR, getting the SHA from the commit message"
                LAST_COMMIT=(`git log -1 --pretty=%B`)
                HEAD_SHA=${LAST_COMMIT[1]}
              fi
              echo "##vso[task.setvariable variable=gitSha;isOutput=true]$HEAD_SHA"
              until [ $RETRIES -eq 0 ] || [[ `az acr repository show-tags -n ccfmsrc --repository ccf/ci` == *"$HEAD_SHA"* ]]
              do
                sleep 60
                echo "$(( RETRIES-- )) tries remaining"
              done
            name: wait_for_image
            displayName: "Wait for CI Container Building"

          - script: |
              set -ex
              python3.8 -m venv ./scripts/azure_deployment/.env
              source ./scripts/azure_deployment/.env/bin/activate
              pip install -r ./scripts/azure_deployment/requirements.txt
              python3.8 scripts/azure_deployment/arm_template.py deploy aci \
                --subscription-id $(CCF_AZURE_SUBSCRIPTION_ID) \
                --resource-group ccf-aci \
                --region northeurope \
                --aci-type dynamic-agent \
                --deployment-name ci-$(Build.BuildNumber)-secondaries \
                --aci-image ccfmsrc.azurecr.io/ccf/ci:pr-$(wait_for_image.gitSha) \
                --ports 22 \
                --count ${{ parameters.secondaries.count }} \
                --aci-setup-timeout 600 \
                --out ~/secondary_aci_ips
              echo "##vso[task.setvariable variable=secondaryIpAddresses;isOutput=true]`base64 -w 0 ~/secondary_aci_ips`"
            name: deploy_secondary_aci
            displayName: "Deploy Secondary ACI"
            env:
              CCF_AZURE_SUBSCRIPTION_ID: $(CCF_AZURE_SUBSCRIPTION_ID)

  - ${{ if not(eq(parameters.secondaries.count, 0)) }}:
      - job: connect_primary_with_secondaries
        displayName: "Connect Primary ACI with Secondaries"
        dependsOn:
          - generate_ssh_key
          - deploy_primary_aci
          - deploy_secondary_aci
        variables:
          Codeql.SkipTaskAutoInjection: true
          skipComponentGovernanceDetection: true
          sshKey: $[ dependencies.generate_ssh_key.outputs['generate_ssh_key.sshKey'] ]
          IpAddresses: $[ dependencies.deploy_primary_aci.outputs['deploy_primary_aci.ipAddresses'] ]
          SecondaryIpAddresses: $[ dependencies.deploy_secondary_aci.outputs['deploy_secondary_aci.secondaryIpAddresses'] ]
        steps:
          - checkout: none

          - template: install_ssh_key.yml
            parameters:
              ssh_key: $(sshKey)

          - script: |
              set -ex
              echo $(SecondaryIpAddresses) | base64 -d > ~/secondary_ip_addresses
              mapfile -t IP_ADDR_LIST <<< $(echo "$(IpAddresses)" | awk '{print $2}')
              for IP_ADDR in "${IP_ADDR_LIST[@]}"; do
                ssh agent@$IP_ADDR -o "StrictHostKeyChecking=no" -o ConnectTimeout=100 'echo "Connected successfully"'
                scp ~/secondary_ip_addresses agent@$IP_ADDR:${{ parameters.secondaries.path }}
              done
            displayName: "Connect Primary ACI with Secondaries"

  - job: cleanup_aci
    displayName: "Cleanup ACI"
    pool:
      vmImage: ubuntu-20.04
    dependsOn:
      - generate_ssh_key
      - deploy_primary_aci
      - ${{ parameters.used_by }}
    condition: always()
    variables:
      IpAddresses: $[ dependencies.deploy_primary_aci.outputs['deploy_primary_aci.ipAddresses'] ]
      sshKey: $[ dependencies.generate_ssh_key.outputs['generate_ssh_key.sshKey'] ]
    steps:
      - template: install_ssh_key.yml
        parameters:
          ssh_key: $(sshKey)

      - script: |
          set -ex
          mapfile -t IP_ADDR_LIST <<< $(echo "$(IpAddresses)" | awk '{print $2}')
          for IP_ADDR in "${IP_ADDR_LIST[@]}"; do
            ssh agent@$IP_ADDR -o "StrictHostKeyChecking=no" -o ConnectTimeout=100 '
            sudo rm -rf /ccfci/workspace_$(Build.BuildNumber)
            '
          done
        name: cleanup_workspace
        displayName: "Cleanup Workspace"
        continueOnError: true

      - template: azure_cli.yml
        parameters:
          app_id: $(CCF_SNP_CI_APP_ID)
          service_principal_password: $(CCF_SNP_CI_SERVICE_PRINCIPAL_PASSWORD)
          tenant: $(CCF_SNP_CI_TENANT)

      - script: |
          set -ex
          python3.8 -m venv ./scripts/azure_deployment/.env
          source ./scripts/azure_deployment/.env/bin/activate
          pip install -r ./scripts/azure_deployment/requirements.txt
          python3.8 scripts/azure_deployment/arm_template.py remove aci \
          --subscription-id $(CCF_AZURE_SUBSCRIPTION_ID) \
          --resource-group ccf-aci \
          --aci-type dynamic-agent \
          --deployment-name ci-$(Build.BuildNumber)
        name: cleanup_primary_aci
        displayName: "Delete the primary ACIs and Azure Deployments"
        continueOnError: true

      - script: |
          source ./scripts/azure_deployment/.env/bin/activate
          if [[ ${{ parameters.secondaries.count }} != 0 ]]; then
            python3.8 scripts/azure_deployment/arm_template.py remove aci \
            --subscription-id $(CCF_AZURE_SUBSCRIPTION_ID) \
            --resource-group ccf-aci \
            --aci-type dynamic-agent \
            --deployment-name ci-$(Build.BuildNumber)-secondaries
          fi
        name: cleanup_secondary_acis
        displayName: "Delete the secondary ACIs and Azure Deployments"
