parameters:
  v8_version: "9.4.146.17"
  v8_mode: ""
  target: ""

steps:
  - script: |
      set -e
      # Universal Packages versions only take three sections X.Y.Z.
      # V8 versions have four sections, with the first two as the chromium version.
      #   Ex: 9.4.146.17 (Chromium version 94)
      MAJOR=$(echo ${{ parameters.v8_version }} | cut -d "." -f 1,2 | sed 's/\.//')
      # We also want our build version to increment, so we also join the last two.
      #   Ex: 9.4.146.17 -> 94.14617.*
      MINOR=$(echo ${{ parameters.v8_version }} | cut -d "." -f 3,4 | sed 's/\.//')
      echo "##vso[task.setvariable variable=pkg-ver]$MAJOR.$MINOR.*"
      # Map the target parameter to the target.
      if [ "${{ parameters.target }}" == "Virtual" ]; then
        TARGET="virtual"
      elif [ "${{ parameters.target }}" == "SGX" ]; then
        TARGET="sgx"
      else
        echo "Unknown target: ${{ parameters.target }}"
      fi
      echo "##vso[task.setvariable variable=v8_target]$TARGET"
      # Create the download folder.
      mkdir -p build-v8
    displayName: "Compute V8 artifact location"

  - task: UniversalPackages@0
    displayName: "Download V8 artifact"
    inputs:
      command: download
      downloadDirectory: "build-v8"
      vstsFeed: "CCF/V8"
      vstsFeedPackage: "v8-monolith-${{ parameters.v8_mode }}-$(v8_target)"
      vstsPackageVersion: "$(pkg-ver)"

  - script: |
      set -ex
      BASE_DIR="build-v8"
      TARBALL="$BASE_DIR/v8-${{ parameters.v8_version }}-${{ parameters.v8_mode }}-$(v8_target).tar.xz"
      INSTALL_DIR="$BASE_DIR/${{ parameters.v8_mode }}-$(v8_target)"
      mkdir -p "$INSTALL_DIR"
      tar Jxf "$TARBALL" --strip 1 -C "$INSTALL_DIR"
    displayName: "Extract V8 artifact"
