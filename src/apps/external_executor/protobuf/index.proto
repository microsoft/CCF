syntax = "proto3";

import "google/protobuf/empty.proto";

package externalexecutor.protobuf;

option optimize_for = LITE_RUNTIME;

// Service exposed by a CCF node for Executors/Indexers to interact with the
// Index stored on the CCF node. Communication with this service must be over
// TLS, authorising as a client cert that has previously been accepted by the
// ExecutorRegistration service.
service Index
{
  // Installs index and registers with the given table/map name.
  // Streams Key-Value pairs of every transaction in the given table name.
  rpc InstallAndSubscribe(IndexSubscribe) returns (stream IndexWork) {}

  // Stores indexed data in an unordered map datastructure or a prefix tree
  // depending on the type of enum passed
  rpc StoreIndexedData(IndexPayload) returns (google.protobuf.Empty) {}

  // Takes an input of Index Strategy name, data structure type and a Key,
  // returns values from the indexed data on the local CCF node
  // This can be invoked by any registered indexer
  rpc GetIndexedData(IndexKey) returns (IndexValue) {}

  // Detaches indexer stream
  rpc Unsubscribe(IndexStrategy) returns (google.protobuf.Empty) {}
}

message IndexKeyValue
{
  bytes key = 1;
  bytes value = 2;
}

message Subscribed {}
message Published {}

message IndexWork
{
  oneof task
  {
    Subscribed subscribed = 1;
    IndexKeyValue key_value = 2;
    Published work_done = 3;
  }
}

enum DataStructure {
  MAP = 0;
  PREFIX_TREE = 1;
}

message IndexSubscribe { string map_name = 1; }

message IndexKey
{
  string strategy_name = 1;
  DataStructure data_structure = 2;
  bytes key = 3;
}

message IndexStrategy { string strategy_name = 1; }

message IndexValue { bytes value = 1; }

message IndexPayload
{
  string strategy_name = 1;
  DataStructure data_structure = 2;
  bytes key = 3;
  bytes value = 4;
}